{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\thene\\\\Google Drive\\\\GWG phase 2\\\\GWGprojects\\\\reactnd-project-myreads-starter\\\\src\\\\components\\\\SearchPage.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from '../BooksAPI';\nimport Book from './Book'; // import escapeRegExp from 'escape-string-regexp'\n// import sortBy from 'sort-by'\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchPage, _React$Component);\n\n  function SearchPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      books: [],\n      query: \"\",\n      results: []\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query.trim()\n      }, _this.submitSearch);\n    };\n\n    _this.searchBooks =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(query) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(query === \"\")) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.setState({\n                  books: []\n                });\n                _context.next = 9;\n                break;\n\n              case 4:\n                console.log(query);\n                _context.next = 7;\n                return BooksAPI.search(query);\n\n              case 7:\n                results = _context.sent;\n\n                if (results.length) {\n                  this.setState({\n                    books: results\n                  });\n                } else {\n                  this.setState({\n                    books: []\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (books) {\n        _this2.setState({\n          books: books\n        });\n      });\n    }\n  }, {\n    key: \"submitSearch\",\n    value: function submitSearch() {\n      var _this3 = this;\n\n      if (this.state.query === '') {\n        return this.setState({\n          results: []\n        });\n      }\n\n      BooksAPI.search(this.state.query()).then(function (results) {\n        if (results.error) {\n          return _this3.setState({\n            results: []\n          });\n        } //books displaying correct filter status 1:10 https://www.youtube.com/watch?v=acJHkd6K5kI&=&feature=youtu.be\n        else {\n            results.forEach(function (book) {\n              var fltr = _this3.state.books.filter(function (Book) {\n                return Book.id === book.id;\n              });\n\n              if (fltr[0]) {\n                book.shelf = fltr[0].shelf;\n              }\n            });\n            return _this3.setState({\n              results: results\n            });\n          }\n      });\n    } //need to figure out how to do multiword search Danny suggest RegEX \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var updateBookshelf = this.props.updateBookshelf;\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        value: this.state.query,\n        onChange: function onChange(event) {\n          return _this4.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.state.results.map(function (book, key) {\n        return React.createElement(Book, {\n          updateBookshelf: updateBookshelf,\n          book: book,\n          key: book.id,\n          shelf: book.shelf,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return SearchPage;\n}(React.Component);\n\nexport default SearchPage;","map":{"version":3,"sources":["C:\\Users\\thene\\Google Drive\\GWG phase 2\\GWGprojects\\reactnd-project-myreads-starter\\src\\components\\SearchPage.js"],"names":["React","Link","BooksAPI","Book","SearchPage","state","books","query","results","updateQuery","setState","trim","submitSearch","searchBooks","console","log","search","length","getAll","then","error","forEach","book","fltr","filter","id","shelf","updateBookshelf","props","event","target","value","map","key","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport * as BooksAPI from '../BooksAPI'\r\nimport Book from './Book'\r\n// import escapeRegExp from 'escape-string-regexp'\r\n// import sortBy from 'sort-by'\r\n\r\nclass SearchPage extends React.Component {\r\n\r\n  state = {\r\n    books:[],\r\n    query: \"\",\r\n    results:[]\r\n  }\r\n\r\n  componentDidMount() {\r\n    BooksAPI.getAll()\r\n    .then(books=> {\r\n      this.setState({books});\r\n    })\r\n  }\r\n\r\n  updateQuery = (query) => {\r\n    this.setState({query: query.trim()}, this.submitSearch);\r\n  }\r\n\r\n  searchBooks = async function(query) {\r\n    if (query === \"\") {\r\n      this.setState({books: []})\r\n    }\r\n  \r\n    else {\r\n  \r\n    console.log(query);\r\n    let results = await BooksAPI.search(query);\r\n      if (results.length) {\r\n    this.setState({books: results});\r\n      }\r\n      else {\r\n        this.setState({books: []})\r\n      }\r\n    }\r\n};\r\n  submitSearch() {\r\n    if(this.state.query === '') {\r\n      return this.setState({results: [] })\r\n    }\r\n    \r\n    BooksAPI.search(this.state.query()).then(results => {\r\n      if(results.error) {\r\n        return this.setState({results: [] })\r\n      }\r\n      //books displaying correct filter status 1:10 https://www.youtube.com/watch?v=acJHkd6K5kI&=&feature=youtu.be\r\n      else {\r\n        results.forEach(book => {\r\n          let fltr = this.state.books.filter(Book => Book.id === book.id)\r\n            if(fltr[0]) { book.shelf = fltr[0].shelf }               \r\n        });\r\n      return this.setState({results: results })\r\n      }\r\n    })\r\n  }\r\n\r\n \r\n  //need to figure out how to do multiword search Danny suggest RegEX \r\n\r\n  render() {\r\n    const {updateBookshelf}= this.props;\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to=\"/\">Close</Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input type=\"text\" placeholder=\"Search by title or author\" value={this.state.query} onChange={(event) => this.updateQuery(event.target.value)} />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {\r\n              this.state.results.map((book,key)=> <Book updateBookshelf={updateBookshelf} book={book} key={book.id} shelf={book.shelf}/>)\r\n            }\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage;"]},"metadata":{},"sourceType":"module"}