{"ast":null,"code":"var objectPath = require('object-path');\n\nvar sortBy;\nvar sort;\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @return {Function}        Returns the comparator function\n */\n\nsort = function sort(property) {\n  var sortOrder = 1;\n  var fn;\n\n  if (property[0] === \"-\") {\n    sortOrder = -1;\n    property = property.substr(1);\n  }\n\n  return function fn(a, b) {\n    var result;\n    if (objectPath.get(a, property) < objectPath.get(b, property)) result = -1;\n    if (objectPath.get(a, property) > objectPath.get(b, property)) result = 1;\n    if (objectPath.get(a, property) === objectPath.get(b, property)) result = 0;\n    return result * sortOrder;\n  };\n};\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\n\n\nsortBy = function sortBy() {\n  var properties = arguments;\n  var fn;\n  return function fn(obj1, obj2) {\n    var numberOfProperties = properties.length,\n        result = 0,\n        i = 0;\n    /* try getting a different result from 0 (equal)\n     * as long as we have extra properties to compare\n     */\n\n    while (result === 0 && i < numberOfProperties) {\n      result = sort(properties[i])(obj1, obj2);\n      i++;\n    }\n\n    return result;\n  };\n};\n/**\n * Expose `sortBy`\n * @type {Function}\n */\n\n\nmodule.exports = sortBy;","map":null,"metadata":{},"sourceType":"script"}